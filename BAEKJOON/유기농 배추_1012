import sys
from collections import deque

In = lambda : sys.stdin.readline().rstrip()
MIS = lambda : map(int, In().split())

def BFS(x,y):
	dq = deque([(x,y)])
	while dq:
		x, y = dq.popleft()
		for nx, ny in [(x-1,y),(x+1,y),(x,y-1),(x,y+1)]:
			if 0<=nx<R and 0<=ny<C and vist[nx][ny] == 0 and ground[nx][ny] == 1:
				vist[nx][ny] = 1
				dq.append((nx,ny))
	return

T = int(In())
for t in range(T):
	C, R, K = MIS()
	ground = [[0]*C for i in range(R)]
	for k in range(K):
		c, r = MIS()
		ground[r][c] = 1
	ans = 0
	vist = [[0] * C for i in range(R)]
	for x in range(R):
		for y in range(C):
			if ground[x][y] == 1 and not vist[x][y]:
				BFS(x,y)
				ans += 1
	print(ans)